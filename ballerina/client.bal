// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

// Copyright (c) 2024, WSO2 LLC. (http://www.wso2.com).
//
// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

import ballerina/http;

# Twitter API v2 available endpoints
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.twitter.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, timeout: config.timeout, forwarded: config.forwarded, poolConfig: config.poolConfig, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, validation: config.validation};
        do {
            if config.http1Settings is ClientHttp1Settings {
                ClientHttp1Settings settings = check config.http1Settings.ensureType(ClientHttp1Settings);
                httpClientConfig.http1Settings = {...settings};
            }
            if config.http2Settings is http:ClientHttp2Settings {
                httpClientConfig.http2Settings = check config.http2Settings.ensureType(http:ClientHttp2Settings);
            }
            if config.cache is http:CacheConfig {
                httpClientConfig.cache = check config.cache.ensureType(http:CacheConfig);
            }
            if config.responseLimits is http:ResponseLimitConfigs {
                httpClientConfig.responseLimits = check config.responseLimits.ensureType(http:ResponseLimitConfigs);
            }
            if config.secureSocket is http:ClientSecureSocket {
                httpClientConfig.secureSocket = check config.secureSocket.ensureType(http:ClientSecureSocket);
            }
            if config.proxy is http:ProxyConfig {
                httpClientConfig.proxy = check config.proxy.ensureType(http:ProxyConfig);
            }
        }
        http:Client httpEp = check new (serviceUrl, httpClientConfig);
        self.clientEp = httpEp;
        return;
    }

    resource isolated function delete '2/dm_events/[DmEventId event_id](map<string|string[]> headers = {}) returns DeleteDmResponse|error {
        string resourcePath = string `/2/dm_events/${getEncodedUri(event_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/lists/[ListId id](map<string|string[]> headers = {}) returns ListDeleteResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/lists/[ListId id]/members/[UserId user_id](map<string|string[]> headers = {}) returns ListMutateResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}/members/${getEncodedUri(user_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/tweets/[TweetId id](map<string|string[]> headers = {}) returns TweetDeleteResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser id]/bookmarks/[TweetId tweet_id](map<string|string[]> headers = {}) returns BookmarkMutationResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/bookmarks/${getEncodedUri(tweet_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser id]/followed_lists/[ListId list_id](map<string|string[]> headers = {}) returns ListFollowedResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/followed_lists/${getEncodedUri(list_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser id]/likes/[TweetId tweet_id](map<string|string[]> headers = {}) returns UsersLikesDeleteResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/likes/${getEncodedUri(tweet_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser id]/pinned_lists/[ListId list_id](map<string|string[]> headers = {}) returns ListUnpinResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/pinned_lists/${getEncodedUri(list_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser id]/retweets/[TweetId source_tweet_id](map<string|string[]> headers = {}) returns UsersRetweetsDeleteResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/retweets/${getEncodedUri(source_tweet_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser source_user_id]/following/[UserId target_user_id](map<string|string[]> headers = {}) returns UsersFollowingDeleteResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(source_user_id)}/following/${getEncodedUri(target_user_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function delete '2/users/[UserIdMatchesAuthenticatedUser source_user_id]/muting/[UserId target_user_id](map<string|string[]> headers = {}) returns MuteUserMutationResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(source_user_id)}/muting/${getEncodedUri(target_user_id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    resource isolated function get '2/compliance/jobs(map<string|string[]> headers = {}, *ListBatchComplianceJobsQueries queries) returns Get2ComplianceJobsResponse|error {
        string resourcePath = string `/2/compliance/jobs`;
        map<Encoding> queryParamEncoding = {"compliance_job.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/compliance/jobs/[JobId id](map<string|string[]> headers = {}, *GetBatchComplianceJobQueries queries) returns Get2ComplianceJobsIdResponse|error {
        string resourcePath = string `/2/compliance/jobs/${getEncodedUri(id)}`;
        map<Encoding> queryParamEncoding = {"compliance_job.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/dm_conversations/[DmConversationId id]/dm_events(map<string|string[]> headers = {}, *GetDmConversationsIdDmEventsQueries queries) returns Get2DmConversationsIdDmEventsResponse|error {
        string resourcePath = string `/2/dm_conversations/${getEncodedUri(id)}/dm_events`;
        map<Encoding> queryParamEncoding = {"event_types": {style: FORM, explode: false}, "dm_event.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/dm_conversations/with/[UserId participant_id]/dm_events(map<string|string[]> headers = {}, *GetDmConversationsWithParticipantIdDmEventsQueries queries) returns Get2DmConversationsWithParticipantIdDmEventsResponse|error {
        string resourcePath = string `/2/dm_conversations/with/${getEncodedUri(participant_id)}/dm_events`;
        map<Encoding> queryParamEncoding = {"event_types": {style: FORM, explode: false}, "dm_event.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/dm_events(map<string|string[]> headers = {}, *GetDmEventsQueries queries) returns Get2DmEventsResponse|error {
        string resourcePath = string `/2/dm_events`;
        map<Encoding> queryParamEncoding = {"event_types": {style: FORM, explode: false}, "dm_event.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/dm_events/[DmEventId event_id](map<string|string[]> headers = {}, *GetDmEventsByIdQueries queries) returns Get2DmEventsEventIdResponse|error {
        string resourcePath = string `/2/dm_events/${getEncodedUri(event_id)}`;
        map<Encoding> queryParamEncoding = {"dm_event.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/likes/compliance/'stream(map<string|string[]> headers = {}, *GetLikesComplianceStreamQueries queries) returns LikesComplianceStreamResponse|error {
        string resourcePath = string `/2/likes/compliance/stream`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/likes/firehose/'stream(map<string|string[]> headers = {}, *LikesFirehoseStreamQueries queries) returns StreamingLikeResponse|error {
        string resourcePath = string `/2/likes/firehose/stream`;
        map<Encoding> queryParamEncoding = {"like.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/likes/sample10/'stream(map<string|string[]> headers = {}, *LikesSample10StreamQueries queries) returns StreamingLikeResponse|error {
        string resourcePath = string `/2/likes/sample10/stream`;
        map<Encoding> queryParamEncoding = {"like.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/lists/[ListId id](map<string|string[]> headers = {}, *ListIdGetQueries queries) returns Get2ListsIdResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}`;
        map<Encoding> queryParamEncoding = {"list.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/lists/[ListId id]/followers(map<string|string[]> headers = {}, *ListGetFollowersQueries queries) returns Get2ListsIdFollowersResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}/followers`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/lists/[ListId id]/members(map<string|string[]> headers = {}, *ListGetMembersQueries queries) returns Get2ListsIdMembersResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}/members`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/lists/[ListId id]/tweets(map<string|string[]> headers = {}, *ListsIdTweetsQueries queries) returns Get2ListsIdTweetsResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}/tweets`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/openapi\.json(map<string|string[]> headers = {}) returns record {}|error {
        string resourcePath = string `/2/openapi.json`;
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces(map<string|string[]> headers = {}, *FindSpacesByIdsQueries queries) returns Get2SpacesResponse|error {
        string resourcePath = string `/2/spaces`;
        map<Encoding> queryParamEncoding = {"ids": {style: FORM, explode: true}, "space.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "topic.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces/'by/creator_ids(map<string|string[]> headers = {}, *FindSpacesByCreatorIdsQueries queries) returns Get2SpacesByCreatorIdsResponse|error {
        string resourcePath = string `/2/spaces/by/creator_ids`;
        map<Encoding> queryParamEncoding = {"user_ids": {style: FORM, explode: true}, "space.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "topic.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces/[string id](map<string|string[]> headers = {}, *FindSpaceByIdQueries queries) returns Get2SpacesIdResponse|error {
        string resourcePath = string `/2/spaces/${getEncodedUri(id)}`;
        map<Encoding> queryParamEncoding = {"space.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "topic.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces/[string id]/buyers(map<string|string[]> headers = {}, *SpaceBuyersQueries queries) returns Get2SpacesIdBuyersResponse|error {
        string resourcePath = string `/2/spaces/${getEncodedUri(id)}/buyers`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces/[string id]/tweets(map<string|string[]> headers = {}, *SpaceTweetsQueries queries) returns Get2SpacesIdTweetsResponse|error {
        string resourcePath = string `/2/spaces/${getEncodedUri(id)}/tweets`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/spaces/search(map<string|string[]> headers = {}, *SearchSpacesQueries queries) returns Get2SpacesSearchResponse|error {
        string resourcePath = string `/2/spaces/search`;
        map<Encoding> queryParamEncoding = {"space.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "topic.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/trends/'by/woeid/[int:Signed32 woeid](map<string|string[]> headers = {}, *GetTrendsQueries queries) returns Get2TrendsByWoeidWoeidResponse|error {
        string resourcePath = string `/2/trends/by/woeid/${getEncodedUri(woeid)}`;
        map<Encoding> queryParamEncoding = {"trend.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets(map<string|string[]> headers = {}, *FindTweetsByIdQueries queries) returns Get2TweetsResponse|error {
        string resourcePath = string `/2/tweets`;
        map<Encoding> queryParamEncoding = {"ids": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/[TweetId id](map<string|string[]> headers = {}, *FindTweetByIdQueries queries) returns Get2TweetsIdResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/[TweetId id]/liking_users(map<string|string[]> headers = {}, *TweetsIdLikingUsersQueries queries) returns Get2TweetsIdLikingUsersResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}/liking_users`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/[TweetId id]/quote_tweets(map<string|string[]> headers = {}, *FindTweetsThatQuoteATweetQueries queries) returns Get2TweetsIdQuoteTweetsResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}/quote_tweets`;
        map<Encoding> queryParamEncoding = {"exclude": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/[TweetId id]/retweeted_by(map<string|string[]> headers = {}, *TweetsIdRetweetingUsersQueries queries) returns Get2TweetsIdRetweetedByResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}/retweeted_by`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/[TweetId id]/retweets(map<string|string[]> headers = {}, *FindTweetsThatRetweetATweetQueries queries) returns Get2TweetsIdRetweetsResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(id)}/retweets`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/compliance/'stream(map<string|string[]> headers = {}, *GetTweetsComplianceStreamQueries queries) returns TweetComplianceStreamResponse|error {
        string resourcePath = string `/2/tweets/compliance/stream`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/counts/all(map<string|string[]> headers = {}, *TweetCountsFullArchiveSearchQueries queries) returns Get2TweetsCountsAllResponse|error {
        string resourcePath = string `/2/tweets/counts/all`;
        map<Encoding> queryParamEncoding = {"search_count.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/counts/recent(map<string|string[]> headers = {}, *TweetCountsRecentSearchQueries queries) returns Get2TweetsCountsRecentResponse|error {
        string resourcePath = string `/2/tweets/counts/recent`;
        map<Encoding> queryParamEncoding = {"search_count.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/firehose/'stream(map<string|string[]> headers = {}, *GetTweetsFirehoseStreamQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/firehose/stream`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/firehose/'stream/lang/en(map<string|string[]> headers = {}, *GetTweetsFirehoseStreamLangEnQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/firehose/stream/lang/en`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/firehose/'stream/lang/ja(map<string|string[]> headers = {}, *GetTweetsFirehoseStreamLangJaQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/firehose/stream/lang/ja`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/firehose/'stream/lang/ko(map<string|string[]> headers = {}, *GetTweetsFirehoseStreamLangKoQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/firehose/stream/lang/ko`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/firehose/'stream/lang/pt(map<string|string[]> headers = {}, *GetTweetsFirehoseStreamLangPtQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/firehose/stream/lang/pt`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/label/'stream(map<string|string[]> headers = {}, *GetTweetsLabelStreamQueries queries) returns TweetLabelStreamResponse|error {
        string resourcePath = string `/2/tweets/label/stream`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/sample/'stream(map<string|string[]> headers = {}, *SampleStreamQueries queries) returns StreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/sample/stream`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/sample10/'stream(map<string|string[]> headers = {}, *GetTweetsSample10StreamQueries queries) returns Get2TweetsSample10StreamResponse|error {
        string resourcePath = string `/2/tweets/sample10/stream`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/search/'stream(map<string|string[]> headers = {}, *SearchStreamQueries queries) returns FilteredStreamingTweetResponse|error {
        string resourcePath = string `/2/tweets/search/stream`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/search/'stream/rules(map<string|string[]> headers = {}, *GetRulesQueries queries) returns RulesLookupResponse|error {
        string resourcePath = string `/2/tweets/search/stream/rules`;
        map<Encoding> queryParamEncoding = {"ids": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/search/'stream/rules/counts(map<string|string[]> headers = {}, *GetRuleCountQueries queries) returns Get2TweetsSearchStreamRulesCountsResponse|error {
        string resourcePath = string `/2/tweets/search/stream/rules/counts`;
        map<Encoding> queryParamEncoding = {"rules_count.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/search/all(map<string|string[]> headers = {}, *TweetsFullarchiveSearchQueries queries) returns Get2TweetsSearchAllResponse|error {
        string resourcePath = string `/2/tweets/search/all`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/tweets/search/recent(map<string|string[]> headers = {}, *TweetsRecentSearchQueries queries) returns Get2TweetsSearchRecentResponse|error {
        string resourcePath = string `/2/tweets/search/recent`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/usage/tweets(map<string|string[]> headers = {}, *GetUsageTweetsQueries queries) returns Get2UsageTweetsResponse|error {
        string resourcePath = string `/2/usage/tweets`;
        map<Encoding> queryParamEncoding = {"usage.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users(map<string|string[]> headers = {}, *FindUsersByIdQueries queries) returns Get2UsersResponse|error {
        string resourcePath = string `/2/users`;
        map<Encoding> queryParamEncoding = {"ids": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/'by(map<string|string[]> headers = {}, *FindUsersByUsernameQueries queries) returns Get2UsersByResponse|error {
        string resourcePath = string `/2/users/by`;
        map<Encoding> queryParamEncoding = {"usernames": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/'by/username/[string username](map<string|string[]> headers = {}, *FindUserByUsernameQueries queries) returns Get2UsersByUsernameUsernameResponse|error {
        string resourcePath = string `/2/users/by/username/${getEncodedUri(username)}`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserIdMatchesAuthenticatedUser id]/blocking(map<string|string[]> headers = {}, *UsersIdBlockingQueries queries) returns Get2UsersIdBlockingResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/blocking`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserIdMatchesAuthenticatedUser id]/bookmarks(map<string|string[]> headers = {}, *GetUsersIdBookmarksQueries queries) returns Get2UsersIdBookmarksResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/bookmarks`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserIdMatchesAuthenticatedUser id]/muting(map<string|string[]> headers = {}, *UsersIdMutingQueries queries) returns Get2UsersIdMutingResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/muting`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserIdMatchesAuthenticatedUser id]/pinned_lists(map<string|string[]> headers = {}, *ListUserPinnedListsQueries queries) returns Get2UsersIdPinnedListsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/pinned_lists`;
        map<Encoding> queryParamEncoding = {"list.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserIdMatchesAuthenticatedUser id]/timelines/reverse_chronological(map<string|string[]> headers = {}, *UsersIdTimelineQueries queries) returns Get2UsersIdTimelinesReverseChronologicalResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/timelines/reverse_chronological`;
        map<Encoding> queryParamEncoding = {"exclude": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id](map<string|string[]> headers = {}, *FindUserByIdQueries queries) returns Get2UsersIdResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/followed_lists(map<string|string[]> headers = {}, *UserFollowedListsQueries queries) returns Get2UsersIdFollowedListsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/followed_lists`;
        map<Encoding> queryParamEncoding = {"list.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/followers(map<string|string[]> headers = {}, *UsersIdFollowersQueries queries) returns Get2UsersIdFollowersResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/followers`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/following(map<string|string[]> headers = {}, *UsersIdFollowingQueries queries) returns Get2UsersIdFollowingResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/following`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/liked_tweets(map<string|string[]> headers = {}, *UsersIdLikedTweetsQueries queries) returns Get2UsersIdLikedTweetsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/liked_tweets`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/list_memberships(map<string|string[]> headers = {}, *GetUserListMembershipsQueries queries) returns Get2UsersIdListMembershipsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/list_memberships`;
        map<Encoding> queryParamEncoding = {"list.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/mentions(map<string|string[]> headers = {}, *UsersIdMentionsQueries queries) returns Get2UsersIdMentionsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/mentions`;
        map<Encoding> queryParamEncoding = {"tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/owned_lists(map<string|string[]> headers = {}, *ListUserOwnedListsQueries queries) returns Get2UsersIdOwnedListsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/owned_lists`;
        map<Encoding> queryParamEncoding = {"list.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/[UserId id]/tweets(map<string|string[]> headers = {}, *UsersIdTweetsQueries queries) returns Get2UsersIdTweetsResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/tweets`;
        map<Encoding> queryParamEncoding = {"exclude": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "media.fields": {style: FORM, explode: false}, "poll.fields": {style: FORM, explode: false}, "user.fields": {style: FORM, explode: false}, "place.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/compliance/'stream(map<string|string[]> headers = {}, *GetUsersComplianceStreamQueries queries) returns UserComplianceStreamResponse|error {
        string resourcePath = string `/2/users/compliance/stream`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/me(map<string|string[]> headers = {}, *FindMyUserQueries queries) returns Get2UsersMeResponse|error {
        string resourcePath = string `/2/users/me`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function get '2/users/search(map<string|string[]> headers = {}, *SearchUserByQueryQueries queries) returns Get2UsersSearchResponse|error {
        string resourcePath = string `/2/users/search`;
        map<Encoding> queryParamEncoding = {"user.fields": {style: FORM, explode: false}, "expansions": {style: FORM, explode: false}, "tweet.fields": {style: FORM, explode: false}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    resource isolated function post '2/compliance/jobs(CreateComplianceJobRequest payload, map<string|string[]> headers = {}) returns CreateComplianceJobResponse|error {
        string resourcePath = string `/2/compliance/jobs`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/dm_conversations(CreateDmConversationRequest payload, map<string|string[]> headers = {}) returns CreateDmEventResponse|error {
        string resourcePath = string `/2/dm_conversations`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/dm_conversations/[string dm_conversation_id]/messages(CreateMessageRequest payload, map<string|string[]> headers = {}) returns CreateDmEventResponse|error {
        string resourcePath = string `/2/dm_conversations/${getEncodedUri(dm_conversation_id)}/messages`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/dm_conversations/with/[UserId participant_id]/messages(CreateMessageRequest payload, map<string|string[]> headers = {}) returns CreateDmEventResponse|error {
        string resourcePath = string `/2/dm_conversations/with/${getEncodedUri(participant_id)}/messages`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/lists(ListCreateRequest payload, map<string|string[]> headers = {}) returns ListCreateResponse|error {
        string resourcePath = string `/2/lists`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/lists/[ListId id]/members(ListAddUserRequest payload, map<string|string[]> headers = {}) returns ListMutateResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}/members`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/tweets(TweetCreateRequest payload, map<string|string[]> headers = {}) returns TweetCreateResponse|error {
        string resourcePath = string `/2/tweets`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/tweets/search/'stream/rules(AddOrDeleteRulesRequest payload, map<string|string[]> headers = {}, *AddOrDeleteRulesQueries queries) returns AddOrDeleteRulesResponse|error {
        string resourcePath = string `/2/tweets/search/stream/rules`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/bookmarks(BookmarkAddRequest payload, map<string|string[]> headers = {}) returns BookmarkMutationResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/bookmarks`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/followed_lists(ListFollowedRequest payload, map<string|string[]> headers = {}) returns ListFollowedResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/followed_lists`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/following(UsersFollowingCreateRequest payload, map<string|string[]> headers = {}) returns UsersFollowingCreateResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/following`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/likes(UsersLikesCreateRequest payload, map<string|string[]> headers = {}) returns UsersLikesCreateResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/likes`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/muting(MuteUserRequest payload, map<string|string[]> headers = {}) returns MuteUserMutationResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/muting`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/pinned_lists(ListPinnedRequest payload, map<string|string[]> headers = {}) returns ListPinnedResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/pinned_lists`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function post '2/users/[UserIdMatchesAuthenticatedUser id]/retweets(UsersRetweetsCreateRequest payload, map<string|string[]> headers = {}) returns UsersRetweetsCreateResponse|error {
        string resourcePath = string `/2/users/${getEncodedUri(id)}/retweets`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    resource isolated function put '2/lists/[ListId id](ListUpdateRequest payload, map<string|string[]> headers = {}) returns ListUpdateResponse|error {
        string resourcePath = string `/2/lists/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    resource isolated function put '2/tweets/[TweetId tweet_id]/hidden(TweetHideRequest payload, map<string|string[]> headers = {}) returns TweetHideResponse|error {
        string resourcePath = string `/2/tweets/${getEncodedUri(tweet_id)}/hidden`;
        http:Request request = new;
        json jsonBody = payload.toJson();
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }
}
